networks:
  coolify:
    external: true

services:
  authentik-server:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG:-2025.8.1}
    hostname: authentik
    networks:
      - coolify
    command: server
    environment:
      - SERVICE_URL_AUTHENTIKSERVER_9000
      - AUTHENTIK_REDIS__HOST=${REDIS_HOST:-redis}
      - AUTHENTIK_POSTGRESQL__HOST=${POSTGRES_HOST:-postgresql}
      - AUTHENTIK_POSTGRESQL__USER=${SERVICE_USER_POSTGRESQL}
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${SERVICE_PASSWORD_POSTGRESQL}
      - AUTHENTIK_SECRET_KEY=${SERVICE_PASSWORD_64_AUTHENTIKSERVER}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING__ENABLED:-true}
      - AUTHENTIK_EMAIL__HOST=${AUTHENTIK_EMAIL__HOST}
      - AUTHENTIK_EMAIL__PORT=${AUTHENTIK_EMAIL__PORT}
      - AUTHENTIK_EMAIL__USERNAME=${AUTHENTIK_EMAIL__USERNAME}
      - AUTHENTIK_EMAIL__PASSWORD=${AUTHENTIK_EMAIL__PASSWORD}
      - AUTHENTIK_EMAIL__USE_TLS=${AUTHENTIK_EMAIL__USE_TLS}
      - AUTHENTIK_EMAIL__USE_SSL=${AUTHENTIK_EMAIL__USE_SSL}
      - AUTHENTIK_EMAIL__TIMEOUT=${AUTHENTIK_EMAIL__TIMEOUT}
      - AUTHENTIK_EMAIL__FROM=${AUTHENTIK_EMAIL__FROM}
    volumes:
      - authentik-media:/media
      - authentik-custom-templates:/templates
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy

  authentik-worker:
    networks:
      - coolify
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG:-2025.8.1}
    command: worker
    environment:
      - AUTHENTIK_REDIS__HOST=${REDIS_HOST:-redis}
      - AUTHENTIK_POSTGRESQL__HOST=${POSTGRES_HOST:-postgresql}
      - AUTHENTIK_POSTGRESQL__USER=${SERVICE_USER_POSTGRESQL}
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${SERVICE_PASSWORD_POSTGRESQL}
      - AUTHENTIK_SECRET_KEY=${SERVICE_PASSWORD_64_AUTHENTIKSERVER}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING__ENABLED}
      - AUTHENTIK_EMAIL__HOST=${AUTHENTIK_EMAIL__HOST}
      - AUTHENTIK_EMAIL__PORT=${AUTHENTIK_EMAIL__PORT}
      - AUTHENTIK_EMAIL__USERNAME=${AUTHENTIK_EMAIL__USERNAME}
      - AUTHENTIK_EMAIL__PASSWORD=${AUTHENTIK_EMAIL__PASSWORD}
      - AUTHENTIK_EMAIL__USE_TLS=${AUTHENTIK_EMAIL__USE_TLS}
      - AUTHENTIK_EMAIL__USE_SSL=${AUTHENTIK_EMAIL__USE_SSL}
      - AUTHENTIK_EMAIL__TIMEOUT=${AUTHENTIK_EMAIL__TIMEOUT}
      - AUTHENTIK_EMAIL__FROM=${AUTHENTIK_EMAIL__FROM}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - authentik-media:/media
      - authentik-certs:/certs
      - authentik-custom-templates:/templates
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgresql:
    networks:
      - coolify
    image: postgres:16-alpine
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}'
      interval: 2s
      timeout: 10s
      retries: 15
    volumes:
      - authentik-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRESQL}
      - POSTGRES_USER=${SERVICE_USER_POSTGRESQL}
      - POSTGRES_DB=authentik

  redis:
    networks:
      - coolify
    image: redis:alpine
    command: --save 60 1 --loglevel warning
    healthcheck:
      test:
        - CMD-SHELL
        - 'redis-cli ping | grep PONG'
      interval: 2s
      timeout: 10s
      retries: 15
    volumes:
      - redis:/data

# first time login:
# /if/flow/initial-setup/
